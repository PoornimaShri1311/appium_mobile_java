name: Mobile Test Automation CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test'
        required: true
        default: 'android'
        type: choice
        options:
        - android
        - ios
        - both
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'smoke'
        type: choice
        options:
        - smoke
        - regression
        - full

jobs:
  # Matrix strategy for multiple device configurations
  test-matrix:
    name: Test on ${{ matrix.platform }} - ${{ matrix.device }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Android configurations
          - platform: android
            os: ubuntu-latest
            device: "Pixel_7_API_33"
            api_level: 33
            arch: x86_64
          - platform: android
            os: ubuntu-latest
            device: "Pixel_4_API_30"
            api_level: 30
            arch: x86_64
          # iOS configurations (macOS only)
          - platform: ios
            os: macos-latest
            device: "iPhone 15"
            ios_version: "17.0"
          - platform: ios
            os: macos-latest
            device: "iPhone 14"
            ios_version: "16.4"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js (for Appium)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Appium and drivers
      run: |
        npm install -g appium
        npm install -g @appium/doctor
        appium driver install uiautomator2
        if [[ "${{ matrix.platform }}" == "ios" ]]; then
          appium driver install xcuitest
        fi

    # Android specific setup
    - name: Set up Android SDK (Android only)
      if: matrix.platform == 'android'
      uses: android-actions/setup-android@v3
      
    - name: Create Android AVD (Android only)
      if: matrix.platform == 'android'
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-${{ matrix.api_level }};google_apis;${{ matrix.arch }}"
        echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd --force --name test --abi google_apis/${{ matrix.arch }} --package "system-images;android-${{ matrix.api_level }};google_apis;${{ matrix.arch }}"

    - name: Start Android Emulator (Android only)
      if: matrix.platform == 'android'
      run: |
        $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader_indirect &
        adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done'

    # iOS specific setup
    - name: Set up iOS Simulator (iOS only)
      if: matrix.platform == 'ios'
      run: |
        IOS_VERSION=$(echo "${{ matrix.ios_version }}" | sed 's/\./-/g')
        xcrun simctl create "Test iPhone" "com.apple.CoreSimulator.SimDeviceType.${{ matrix.device }}" "com.apple.CoreSimulator.SimRuntime.iOS-${IOS_VERSION}"
        DEVICE_ID=$(xcrun simctl list devices | grep "Test iPhone" | awk '{print $3}' | tr -d '()')
        xcrun simctl boot $DEVICE_ID

    - name: Start Appium Server
      run: |
        appium server --log-level info &
        sleep 10

    - name: Run Appium Doctor
      run: appium-doctor --android

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run Tests
      run: |
        mvn clean test \
          -Dplatform=${{ matrix.platform }} \
          -DdeviceName="${{ matrix.device }}" \
          -DplatformVersion="${{ matrix.api_level || matrix.ios_version }}" \
          -Dsuite="${{ github.event.inputs.test_suite || 'smoke' }}" \
          -Dparallel=true \
          -DthreadCount=2

    - name: Generate Accessibility Report
      if: always()
      run: |
        mvn exec:java -Dexec.mainClass="utils.AccessibilityReportGenerator" -Dexec.args="reports/"

    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.platform }}-${{ matrix.device }}
        path: |
          reports/
          screenshots/
          logs/
        retention-days: 30

    - name: Upload Accessibility Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-reports-${{ matrix.platform }}-${{ matrix.device }}
        path: reports/accessibility/
        retention-days: 30

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (${{ matrix.platform }} - ${{ matrix.device }})
        path: 'target/surefire-reports/TEST-*.xml'
        reporter: java-junit
        fail-on-error: true

  # Aggregate results and notifications
  test-summary:
    needs: test-matrix
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate Summary Report
      run: |
        echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Device | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Process results (simplified - you'd parse actual test results)
        if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
          echo "| Android | Pixel 7 API 33 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Android | Pixel 4 API 30 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS | iPhone 15 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS | iPhone 14 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Some tests | Failed | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Slack Notification
      if: always() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Mobile Test Automation Results:
          - Platform Matrix: ${{ needs.test-matrix.result }}
          - Commit: ${{ github.sha }}
          - Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}