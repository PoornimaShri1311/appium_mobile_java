name: Mobile Test Automation CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test'
        required: true
        default: 'android'
        type: choice
        options:
        - android
        - ios
      deviceType:
        description: 'Which Android device to run on'
        required: true
        default: 'physical'
        type: choice
        options:
        - physical
        - emulator

jobs:
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # cache: npm

    - name: Install Appium & Drivers
      run: |
        npm install -g appium@2.11.1
        npm install -g @appium/doctor
        appium driver install uiautomator2@3.0.4
        if [ "${{ github.event.inputs.platform }}" == "ios" ]; then
          appium driver install xcuitest@5.0.0
        fi
        appium driver list --installed
        appium --version

    - name: Load capabilities.properties
      id: load_cap
      run: |
        CAP_FILE="src/test/resources/capabilities.properties"
        if [ -f "$CAP_FILE" ]; then
          echo "Loading Android capabilities..."
          while IFS='=' read -r key value
          do
            if [[ ! -z "$key" && ! "$key" =~ ^# ]]; then
              key=$(echo "$key" | tr -d ' ')
              value=$(echo "$value" | tr -d ' ')
              echo "${key}=${value}" >> $GITHUB_ENV
            fi
          done < $CAP_FILE
        else
          echo "No capabilities.properties found, using defaults..."
          echo "appPackage=com.example.app" >> $GITHUB_ENV
          echo "appActivity=.MainActivity" >> $GITHUB_ENV
        fi


    # - name: Load capabilities.properties
    #   id: load_cap1
    #   run: |
    #     echo "Loading Android capabilities..."
    #     while IFS='=' read -r key value
    #     do
    #       if [[ ! -z "$key" && ! "$key" =~ ^# ]]; then
    #         key=$(echo "$key" | tr -d ' ')
    #         value=$(echo "$value" | tr -d ' ')
    #         echo "${key}=${value}" >> $GITHUB_ENV
    #       fi
    #     done < src/test/resources/capabilities.properties

    - name: Android Emulator Setup (if emulator selected)
      if: ${{ github.event.inputs.platform == 'android' && github.event.inputs.deviceType == 'emulator' }}
      run: |
        echo "Creating and starting emulator..."
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "system-images;android-30;google_apis;x86_64"
        echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
          --force --name tablet_emulator \
          --package "system-images;android-30;google_apis;x86_64"
        $ANDROID_HOME/emulator/emulator -avd tablet_emulator -no-window -no-audio -gpu swiftshader_indirect &
        timeout 300 adb wait-for-device
        timeout 600 bash -c 'while [[ -z $(adb shell getprop sys.boot_completed 2>/dev/null | tr -d "\r") ]]; do sleep 5; done'
        adb shell input keyevent 82
        adb devices -l

    - name: Start Appium Server
      run: |
        appium server --port 4723 --base-path /wd/hub --allow-cors &
        sleep 10

    - name: Select Device Capabilities
      run: |
        echo "Selecting capabilities based on deviceType=${{ github.event.inputs.deviceType }}"
        if [ "${{ github.event.inputs.deviceType }}" == "physical" ]; then
          export DEVICE_NAME="$deviceName"
          export UDID="$udid"
        else
          export DEVICE_NAME="emulator-5554"
          export UDID="emulator-5554"
        fi
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "UDID=$UDID" >> $GITHUB_ENV
        echo "App Package: $appPackage, App Activity: $appActivity"

    - name: Run Mobile Tests
      run: |
        echo "Running tests on $DEVICE_NAME ($UDID)"
        mvn clean test \
          -DsuiteXmlFile=src/test/resources/ci-testng.xml \
          -Dplatform=${{ github.event.inputs.platform }} \
          -DdeviceName="$DEVICE_NAME" \
          -Dudid="$UDID" \
          -DappPackage="$appPackage" \
          -DappActivity="$appActivity" \
          -DthreadCount=1 \
          -Dappium.server.host=127.0.0.1 \
          -Dappium.server.port=4723 \
          -Dtest.retry.count=2 \
          -Dci.mode=true

    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-reports
        path: |
          reports/
          screenshots/
          logs/
        retention-days: 30

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Mobile Test Results
        path: 'target/surefire-reports/TEST-*.xml'
        reporter: java-junit
        fail-on-error: true